
sketch_mar16a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000cc6  00000d5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cc6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003f  00800106  00800106  00000d60  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d60  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d90  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e0  00000000  00000000  00000dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002490  00000000  00000000  00000fac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001027  00000000  00000000  0000343c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012b6  00000000  00000000  00004463  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000047c  00000000  00000000  0000571c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ab5  00000000  00000000  00005b98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001142  00000000  00000000  0000664d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  0000778f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__ctors_end>
   4:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
   8:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
   c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  10:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  14:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  18:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  1c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  20:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  24:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  28:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  2c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  30:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  34:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  38:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  3c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  40:	0c 94 25 03 	jmp	0x64a	; 0x64a <__vector_16>
  44:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  48:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  4c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  50:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  54:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  58:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  5c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  60:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  64:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
  a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
  ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_end>:
  b8:	11 24       	eor	r1, r1
  ba:	1f be       	out	0x3f, r1	; 63
  bc:	cf ef       	ldi	r28, 0xFF	; 255
  be:	d8 e0       	ldi	r29, 0x08	; 8
  c0:	de bf       	out	0x3e, r29	; 62
  c2:	cd bf       	out	0x3d, r28	; 61

000000c4 <__do_copy_data>:
  c4:	11 e0       	ldi	r17, 0x01	; 1
  c6:	a0 e0       	ldi	r26, 0x00	; 0
  c8:	b1 e0       	ldi	r27, 0x01	; 1
  ca:	e6 ec       	ldi	r30, 0xC6	; 198
  cc:	fc e0       	ldi	r31, 0x0C	; 12
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <__do_copy_data+0x10>
  d0:	05 90       	lpm	r0, Z+
  d2:	0d 92       	st	X+, r0
  d4:	a6 30       	cpi	r26, 0x06	; 6
  d6:	b1 07       	cpc	r27, r17
  d8:	d9 f7       	brne	.-10     	; 0xd0 <__do_copy_data+0xc>

000000da <__do_clear_bss>:
  da:	21 e0       	ldi	r18, 0x01	; 1
  dc:	a6 e0       	ldi	r26, 0x06	; 6
  de:	b1 e0       	ldi	r27, 0x01	; 1
  e0:	01 c0       	rjmp	.+2      	; 0xe4 <.do_clear_bss_start>

000000e2 <.do_clear_bss_loop>:
  e2:	1d 92       	st	X+, r1

000000e4 <.do_clear_bss_start>:
  e4:	a5 34       	cpi	r26, 0x45	; 69
  e6:	b2 07       	cpc	r27, r18
  e8:	e1 f7       	brne	.-8      	; 0xe2 <.do_clear_bss_loop>
  ea:	0e 94 16 03 	call	0x62c	; 0x62c <main>
  ee:	0c 94 61 06 	jmp	0xcc2	; 0xcc2 <_exit>

000000f2 <__bad_interrupt>:
  f2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f6 <setup>:
void UpdateButtonVals();
void attractMode(void);

 
void setup() { 
    ref0 = ADCTouch.read(A0, 500);    //create reference values to
  f6:	44 ef       	ldi	r20, 0xF4	; 244
  f8:	51 e0       	ldi	r21, 0x01	; 1
  fa:	6e e0       	ldi	r22, 0x0E	; 14
  fc:	84 e4       	ldi	r24, 0x44	; 68
  fe:	91 e0       	ldi	r25, 0x01	; 1
 100:	0e 94 0c 05 	call	0xa18	; 0xa18 <_ZN13ADCTouchClass4readEhi>
 104:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <ref0+0x1>
 108:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <ref0>
    ref1 = ADCTouch.read(A1, 500);      //account for the capacitance of the pad
 10c:	44 ef       	ldi	r20, 0xF4	; 244
 10e:	51 e0       	ldi	r21, 0x01	; 1
 110:	6f e0       	ldi	r22, 0x0F	; 15
 112:	84 e4       	ldi	r24, 0x44	; 68
 114:	91 e0       	ldi	r25, 0x01	; 1
 116:	0e 94 0c 05 	call	0xa18	; 0xa18 <_ZN13ADCTouchClass4readEhi>
 11a:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <ref1+0x1>
 11e:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <ref1>
	ref2 = ADCTouch.read(A2, 500);      //account for the capacitance of the pad
 122:	44 ef       	ldi	r20, 0xF4	; 244
 124:	51 e0       	ldi	r21, 0x01	; 1
 126:	60 e1       	ldi	r22, 0x10	; 16
 128:	84 e4       	ldi	r24, 0x44	; 68
 12a:	91 e0       	ldi	r25, 0x01	; 1
 12c:	0e 94 0c 05 	call	0xa18	; 0xa18 <_ZN13ADCTouchClass4readEhi>
 130:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <ref2+0x1>
 134:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <ref2>
	ref3 = ADCTouch.read(A3, 500);      //account for the capacitance of the pad
 138:	44 ef       	ldi	r20, 0xF4	; 244
 13a:	51 e0       	ldi	r21, 0x01	; 1
 13c:	61 e1       	ldi	r22, 0x11	; 17
 13e:	84 e4       	ldi	r24, 0x44	; 68
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	0e 94 0c 05 	call	0xa18	; 0xa18 <_ZN13ADCTouchClass4readEhi>
 146:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <ref3+0x1>
 14a:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <ref3>
    pinMode(9, OUTPUT);
 14e:	61 e0       	ldi	r22, 0x01	; 1
 150:	89 e0       	ldi	r24, 0x09	; 9
 152:	0e 94 5d 04 	call	0x8ba	; 0x8ba <pinMode>
	pinMode(10, OUTPUT);
 156:	61 e0       	ldi	r22, 0x01	; 1
 158:	8a e0       	ldi	r24, 0x0A	; 10
 15a:	0e 94 5d 04 	call	0x8ba	; 0x8ba <pinMode>
	pinMode(11, OUTPUT);
 15e:	61 e0       	ldi	r22, 0x01	; 1
 160:	8b e0       	ldi	r24, 0x0B	; 11
 162:	0e 94 5d 04 	call	0x8ba	; 0x8ba <pinMode>
	pinMode(12, OUTPUT);
 166:	61 e0       	ldi	r22, 0x01	; 1
 168:	8c e0       	ldi	r24, 0x0C	; 12
 16a:	0e 94 5d 04 	call	0x8ba	; 0x8ba <pinMode>
    digitalWrite(9,LOW);
 16e:	60 e0       	ldi	r22, 0x00	; 0
 170:	89 e0       	ldi	r24, 0x09	; 9
 172:	0e 94 99 04 	call	0x932	; 0x932 <digitalWrite>
	digitalWrite(10,LOW);
 176:	60 e0       	ldi	r22, 0x00	; 0
 178:	8a e0       	ldi	r24, 0x0A	; 10
 17a:	0e 94 99 04 	call	0x932	; 0x932 <digitalWrite>
	digitalWrite(11,LOW);
 17e:	60 e0       	ldi	r22, 0x00	; 0
 180:	8b e0       	ldi	r24, 0x0B	; 11
 182:	0e 94 99 04 	call	0x932	; 0x932 <digitalWrite>
	digitalWrite(12,LOW);
 186:	60 e0       	ldi	r22, 0x00	; 0
 188:	8c e0       	ldi	r24, 0x0C	; 12
 18a:	0c 94 99 04 	jmp	0x932	; 0x932 <digitalWrite>

0000018e <_Z10addToMovesv>:
	return CHOICE_NONE; // If we get here, we've timed out!
}

// Adds a new random button to the game sequence, by sampling the timer
void addToMoves(void) {
	byte newButton = random(0, 4); //min (included), max (excluded)
 18e:	24 e0       	ldi	r18, 0x04	; 4
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	40 e0       	ldi	r20, 0x00	; 0
 194:	50 e0       	ldi	r21, 0x00	; 0
 196:	60 e0       	ldi	r22, 0x00	; 0
 198:	70 e0       	ldi	r23, 0x00	; 0
 19a:	cb 01       	movw	r24, r22
 19c:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <_Z6randomll>

	// We have to convert this number, 0 to 3, to CHOICEs
	if(newButton == 0) 
 1a0:	66 23       	and	r22, r22
 1a2:	41 f0       	breq	.+16     	; 0x1b4 <_Z10addToMovesv+0x26>
		newButton = CHOICE_RED;
	else if(newButton == 1) 
 1a4:	61 30       	cpi	r22, 0x01	; 1
 1a6:	41 f0       	breq	.+16     	; 0x1b8 <_Z10addToMovesv+0x2a>
		newButton = CHOICE_GREEN;
	else if(newButton == 2) 
 1a8:	62 30       	cpi	r22, 0x02	; 2
 1aa:	41 f0       	breq	.+16     	; 0x1bc <_Z10addToMovesv+0x2e>
		newButton = CHOICE_BLUE;
	else if(newButton == 3) 
 1ac:	63 30       	cpi	r22, 0x03	; 3
 1ae:	39 f4       	brne	.+14     	; 0x1be <_Z10addToMovesv+0x30>
		newButton = CHOICE_YELLOW;
 1b0:	68 e0       	ldi	r22, 0x08	; 8
 1b2:	05 c0       	rjmp	.+10     	; 0x1be <_Z10addToMovesv+0x30>
void addToMoves(void) {
	byte newButton = random(0, 4); //min (included), max (excluded)

	// We have to convert this number, 0 to 3, to CHOICEs
	if(newButton == 0) 
		newButton = CHOICE_RED;
 1b4:	61 e0       	ldi	r22, 0x01	; 1
 1b6:	03 c0       	rjmp	.+6      	; 0x1be <_Z10addToMovesv+0x30>
	else if(newButton == 1) 
		newButton = CHOICE_GREEN;
 1b8:	62 e0       	ldi	r22, 0x02	; 2
 1ba:	01 c0       	rjmp	.+2      	; 0x1be <_Z10addToMovesv+0x30>
	else if(newButton == 2) 
		newButton = CHOICE_BLUE;
 1bc:	64 e0       	ldi	r22, 0x04	; 4
	else if(newButton == 3) 
		newButton = CHOICE_YELLOW;

	gameBoard[gameRound++] = newButton; // Add this new button to the game array
 1be:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <gameRound>
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	8e 0f       	add	r24, r30
 1c6:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <gameRound>
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	ed 5e       	subi	r30, 0xED	; 237
 1ce:	fe 4f       	sbci	r31, 0xFE	; 254
 1d0:	60 83       	st	Z, r22
 1d2:	08 95       	ret

000001d4 <_Z16UpdateButtonValsv>:
int value0 = 0;
int value1 = 0;
int value2 = 0;
int value3 = 0;
void UpdateButtonVals(){
    value0 = ADCTouch.read(BUTTON_RED, 20);   //no second parameter
 1d4:	44 e1       	ldi	r20, 0x14	; 20
 1d6:	50 e0       	ldi	r21, 0x00	; 0
 1d8:	6e e0       	ldi	r22, 0x0E	; 14
 1da:	84 e4       	ldi	r24, 0x44	; 68
 1dc:	91 e0       	ldi	r25, 0x01	; 1
 1de:	0e 94 0c 05 	call	0xa18	; 0xa18 <_ZN13ADCTouchClass4readEhi>
 1e2:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <value0+0x1>
 1e6:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <value0>
    value1 = ADCTouch.read(BUTTON_GREEN, 20);     //   --> 100 samples
 1ea:	44 e1       	ldi	r20, 0x14	; 20
 1ec:	50 e0       	ldi	r21, 0x00	; 0
 1ee:	6f e0       	ldi	r22, 0x0F	; 15
 1f0:	84 e4       	ldi	r24, 0x44	; 68
 1f2:	91 e0       	ldi	r25, 0x01	; 1
 1f4:	0e 94 0c 05 	call	0xa18	; 0xa18 <_ZN13ADCTouchClass4readEhi>
 1f8:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <value1+0x1>
 1fc:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <value1>
    value2 = ADCTouch.read(BUTTON_BLUE, 20);     //   --> 100 samples
 200:	44 e1       	ldi	r20, 0x14	; 20
 202:	50 e0       	ldi	r21, 0x00	; 0
 204:	60 e1       	ldi	r22, 0x10	; 16
 206:	84 e4       	ldi	r24, 0x44	; 68
 208:	91 e0       	ldi	r25, 0x01	; 1
 20a:	0e 94 0c 05 	call	0xa18	; 0xa18 <_ZN13ADCTouchClass4readEhi>
 20e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <value2+0x1>
 212:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <value2>
    value3 = ADCTouch.read(BUTTON_YELLOW, 20);     //   --> 100 samples
 216:	44 e1       	ldi	r20, 0x14	; 20
 218:	50 e0       	ldi	r21, 0x00	; 0
 21a:	61 e1       	ldi	r22, 0x11	; 17
 21c:	84 e4       	ldi	r24, 0x44	; 68
 21e:	91 e0       	ldi	r25, 0x01	; 1
 220:	0e 94 0c 05 	call	0xa18	; 0xa18 <_ZN13ADCTouchClass4readEhi>
    
    value0 -= ref0;       //remove offset
 224:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <value0>
 228:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <value0+0x1>
 22c:	20 91 39 01 	lds	r18, 0x0139	; 0x800139 <ref0>
 230:	30 91 3a 01 	lds	r19, 0x013A	; 0x80013a <ref0+0x1>
 234:	62 1b       	sub	r22, r18
 236:	73 0b       	sbc	r23, r19
 238:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <value0+0x1>
 23c:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <value0>
    value1 -= ref1;
 240:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <value1>
 244:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <value1+0x1>
 248:	20 91 37 01 	lds	r18, 0x0137	; 0x800137 <ref1>
 24c:	30 91 38 01 	lds	r19, 0x0138	; 0x800138 <ref1+0x1>
 250:	42 1b       	sub	r20, r18
 252:	53 0b       	sbc	r21, r19
 254:	50 93 0b 01 	sts	0x010B, r21	; 0x80010b <value1+0x1>
 258:	40 93 0a 01 	sts	0x010A, r20	; 0x80010a <value1>
    value2 -= ref2;       //remove offset
 25c:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <value2>
 260:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <value2+0x1>
 264:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <ref2>
 268:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <ref2+0x1>
 26c:	2e 1b       	sub	r18, r30
 26e:	3f 0b       	sbc	r19, r31
 270:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <value2+0x1>
 274:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <value2>
    value3 -= ref3;
 278:	e0 91 33 01 	lds	r30, 0x0133	; 0x800133 <ref3>
 27c:	f0 91 34 01 	lds	r31, 0x0134	; 0x800134 <ref3+0x1>
 280:	8e 1b       	sub	r24, r30
 282:	9f 0b       	sbc	r25, r31
 284:	fc 01       	movw	r30, r24
 286:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
 28a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>

    if (value0 > 30)
 28e:	6f 31       	cpi	r22, 0x1F	; 31
 290:	71 05       	cpc	r23, r1
 292:	44 f0       	brlt	.+16     	; 0x2a4 <_Z16UpdateButtonValsv+0xd0>
	    Button0Val < 10 ? Button0Val++ :0;
 294:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <Button0Val>
 298:	9a 30       	cpi	r25, 0x0A	; 10
 29a:	30 f4       	brcc	.+12     	; 0x2a8 <_Z16UpdateButtonValsv+0xd4>
 29c:	9f 5f       	subi	r25, 0xFF	; 255
 29e:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <Button0Val>
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <_Z16UpdateButtonValsv+0xd4>
    else 
	    Button0Val = 0;
 2a4:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <Button0Val>

    if (value1 > 30)
 2a8:	4f 31       	cpi	r20, 0x1F	; 31
 2aa:	51 05       	cpc	r21, r1
 2ac:	44 f0       	brlt	.+16     	; 0x2be <_Z16UpdateButtonValsv+0xea>
	    Button1Val < 10 ? Button1Val++ :0;
 2ae:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <Button1Val>
 2b2:	9a 30       	cpi	r25, 0x0A	; 10
 2b4:	30 f4       	brcc	.+12     	; 0x2c2 <_Z16UpdateButtonValsv+0xee>
 2b6:	9f 5f       	subi	r25, 0xFF	; 255
 2b8:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <Button1Val>
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <_Z16UpdateButtonValsv+0xee>
    else 
	    Button1Val = 0;
 2be:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <Button1Val>

    if (value2 > 30)
 2c2:	2f 31       	cpi	r18, 0x1F	; 31
 2c4:	31 05       	cpc	r19, r1
 2c6:	44 f0       	brlt	.+16     	; 0x2d8 <_Z16UpdateButtonValsv+0x104>
	    Button2Val < 10 ? Button2Val++ :0;
 2c8:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <Button2Val>
 2cc:	9a 30       	cpi	r25, 0x0A	; 10
 2ce:	30 f4       	brcc	.+12     	; 0x2dc <_Z16UpdateButtonValsv+0x108>
 2d0:	9f 5f       	subi	r25, 0xFF	; 255
 2d2:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <Button2Val>
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <_Z16UpdateButtonValsv+0x108>
    else 
	    Button2Val = 0;
 2d8:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <Button2Val>

    if (value3 > 30)
 2dc:	7f 97       	sbiw	r30, 0x1f	; 31
 2de:	44 f0       	brlt	.+16     	; 0x2f0 <_Z16UpdateButtonValsv+0x11c>
	    Button3Val < 10 ? Button3Val++ :0;
 2e0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <Button3Val>
 2e4:	8a 30       	cpi	r24, 0x0A	; 10
 2e6:	30 f4       	brcc	.+12     	; 0x2f4 <_Z16UpdateButtonValsv+0x120>
 2e8:	8f 5f       	subi	r24, 0xFF	; 255
 2ea:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <Button3Val>
 2ee:	08 95       	ret
    else 
	    Button3Val = 0;
 2f0:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <Button3Val>
 2f4:	08 95       	ret

000002f6 <_Z11checkButtonv>:
}

byte checkButton() {
	if (value0 > 9) 
 2f6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <value0>
 2fa:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <value0+0x1>
 2fe:	0a 97       	sbiw	r24, 0x0a	; 10
 300:	a4 f4       	brge	.+40     	; 0x32a <_Z11checkButtonv+0x34>
		return(CHOICE_RED);
	else if (value1 > 9) 
 302:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <value1>
 306:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <value1+0x1>
 30a:	0a 97       	sbiw	r24, 0x0a	; 10
 30c:	84 f4       	brge	.+32     	; 0x32e <_Z11checkButtonv+0x38>
		return(CHOICE_GREEN);
	else if (value2 > 9) 
 30e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <value2>
 312:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <value2+0x1>
 316:	0a 97       	sbiw	r24, 0x0a	; 10
 318:	64 f4       	brge	.+24     	; 0x332 <_Z11checkButtonv+0x3c>
		return(CHOICE_BLUE);
	else if (value3 > 9) 
 31a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 31e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
 322:	0a 97       	sbiw	r24, 0x0a	; 10
 324:	44 f4       	brge	.+16     	; 0x336 <_Z11checkButtonv+0x40>
		return(CHOICE_YELLOW);

	return(CHOICE_NONE); // If no button is pressed, return none	
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	08 95       	ret
	    Button3Val = 0;
}

byte checkButton() {
	if (value0 > 9) 
		return(CHOICE_RED);
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	08 95       	ret
	else if (value1 > 9) 
		return(CHOICE_GREEN);
 32e:	82 e0       	ldi	r24, 0x02	; 2
 330:	08 95       	ret
	else if (value2 > 9) 
		return(CHOICE_BLUE);
 332:	84 e0       	ldi	r24, 0x04	; 4
 334:	08 95       	ret
	else if (value3 > 9) 
		return(CHOICE_YELLOW);
 336:	88 e0       	ldi	r24, 0x08	; 8

	return(CHOICE_NONE); // If no button is pressed, return none	
}
 338:	08 95       	ret

0000033a <_Z7setLEDsh>:



// Lights a given LEDs
// Pass in a byte that is made up from CHOICE_RED, CHOICE_YELLOW, etc
void setLEDs(byte leds) {
 33a:	cf 93       	push	r28
 33c:	c8 2f       	mov	r28, r24
	if ((leds & CHOICE_RED) != 0)
 33e:	80 ff       	sbrs	r24, 0
 340:	02 c0       	rjmp	.+4      	; 0x346 <_Z7setLEDsh+0xc>
		digitalWrite(LED_RED, HIGH);
 342:	61 e0       	ldi	r22, 0x01	; 1
 344:	01 c0       	rjmp	.+2      	; 0x348 <_Z7setLEDsh+0xe>
	else
		digitalWrite(LED_RED, LOW);
 346:	60 e0       	ldi	r22, 0x00	; 0
 348:	8c e0       	ldi	r24, 0x0C	; 12
 34a:	0e 94 99 04 	call	0x932	; 0x932 <digitalWrite>

	if ((leds & CHOICE_GREEN) != 0)
 34e:	c1 ff       	sbrs	r28, 1
 350:	02 c0       	rjmp	.+4      	; 0x356 <_Z7setLEDsh+0x1c>
		digitalWrite(LED_GREEN, HIGH);
 352:	61 e0       	ldi	r22, 0x01	; 1
 354:	01 c0       	rjmp	.+2      	; 0x358 <_Z7setLEDsh+0x1e>
	else
		digitalWrite(LED_GREEN, LOW);
 356:	60 e0       	ldi	r22, 0x00	; 0
 358:	8b e0       	ldi	r24, 0x0B	; 11
 35a:	0e 94 99 04 	call	0x932	; 0x932 <digitalWrite>

	if ((leds & CHOICE_BLUE) != 0)
 35e:	c2 ff       	sbrs	r28, 2
 360:	02 c0       	rjmp	.+4      	; 0x366 <_Z7setLEDsh+0x2c>
		digitalWrite(LED_BLUE, HIGH);
 362:	61 e0       	ldi	r22, 0x01	; 1
 364:	01 c0       	rjmp	.+2      	; 0x368 <_Z7setLEDsh+0x2e>
	else
		digitalWrite(LED_BLUE, LOW);
 366:	60 e0       	ldi	r22, 0x00	; 0
 368:	8a e0       	ldi	r24, 0x0A	; 10
 36a:	0e 94 99 04 	call	0x932	; 0x932 <digitalWrite>

	if ((leds & CHOICE_YELLOW) != 0)
 36e:	c3 ff       	sbrs	r28, 3
 370:	02 c0       	rjmp	.+4      	; 0x376 <_Z7setLEDsh+0x3c>
		digitalWrite(LED_YELLOW, HIGH);
 372:	61 e0       	ldi	r22, 0x01	; 1
 374:	01 c0       	rjmp	.+2      	; 0x378 <_Z7setLEDsh+0x3e>
	else
		digitalWrite(LED_YELLOW, LOW);
 376:	60 e0       	ldi	r22, 0x00	; 0
 378:	89 e0       	ldi	r24, 0x09	; 9
}
 37a:	cf 91       	pop	r28
		digitalWrite(LED_BLUE, LOW);

	if ((leds & CHOICE_YELLOW) != 0)
		digitalWrite(LED_YELLOW, HIGH);
	else
		digitalWrite(LED_YELLOW, LOW);
 37c:	0c 94 99 04 	jmp	0x932	; 0x932 <digitalWrite>

00000380 <_Z9playMovesv>:

	return true; // Player made it through all the rounds to win!
}

// Plays the current contents of the game moves
void playMoves(void) {
 380:	cf 93       	push	r28
	for (byte currentMove = 0 ; currentMove < gameRound ; currentMove++) {
 382:	c0 e0       	ldi	r28, 0x00	; 0
 384:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <gameRound>
 388:	c8 17       	cp	r28, r24
 38a:	c0 f4       	brcc	.+48     	; 0x3bc <_Z9playMovesv+0x3c>
		setLEDs(gameBoard[currentMove]); //Turn on a given LED
 38c:	ec 2f       	mov	r30, r28
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	ed 5e       	subi	r30, 0xED	; 237
 392:	fe 4f       	sbci	r31, 0xFE	; 254
 394:	80 81       	ld	r24, Z
 396:	0e 94 9d 01 	call	0x33a	; 0x33a <_Z7setLEDsh>
		delay(150);
 39a:	66 e9       	ldi	r22, 0x96	; 150
 39c:	70 e0       	ldi	r23, 0x00	; 0
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	0e 94 a0 03 	call	0x740	; 0x740 <delay>
		setLEDs(CHOICE_OFF); // Turn off all LEDs
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	0e 94 9d 01 	call	0x33a	; 0x33a <_Z7setLEDsh>

		delay(150); // 150 works well. 75 gets fast.
 3ac:	66 e9       	ldi	r22, 0x96	; 150
 3ae:	70 e0       	ldi	r23, 0x00	; 0
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	0e 94 a0 03 	call	0x740	; 0x740 <delay>
	return true; // Player made it through all the rounds to win!
}

// Plays the current contents of the game moves
void playMoves(void) {
	for (byte currentMove = 0 ; currentMove < gameRound ; currentMove++) {
 3b8:	cf 5f       	subi	r28, 0xFF	; 255
 3ba:	e4 cf       	rjmp	.-56     	; 0x384 <_Z9playMovesv+0x4>
		delay(150);
		setLEDs(CHOICE_OFF); // Turn off all LEDs

		delay(150); // 150 works well. 75 gets fast.
	}
}
 3bc:	cf 91       	pop	r28
 3be:	08 95       	ret

000003c0 <_Z13waitForButtonv>:

// Wait for a button to be pressed.
// Returns one of LED colors (LED_RED, etc.) if successful, 0 if timed out
byte waitForButton(void) {
 3c0:	cf 92       	push	r12
 3c2:	df 92       	push	r13
 3c4:	ef 92       	push	r14
 3c6:	ff 92       	push	r15
 3c8:	cf 93       	push	r28
	long startTime = millis(); // Remember the time we started the this loop
 3ca:	0e 94 6f 03 	call	0x6de	; 0x6de <millis>
 3ce:	6b 01       	movw	r12, r22
 3d0:	7c 01       	movw	r14, r24

	// Loop until too much time has passed 
	while ( (millis() - startTime) < ENTRY_TIME_LIMIT) {
 3d2:	0e 94 6f 03 	call	0x6de	; 0x6de <millis>
 3d6:	dc 01       	movw	r26, r24
 3d8:	cb 01       	movw	r24, r22
 3da:	8c 19       	sub	r24, r12
 3dc:	9d 09       	sbc	r25, r13
 3de:	ae 09       	sbc	r26, r14
 3e0:	bf 09       	sbc	r27, r15
 3e2:	88 3b       	cpi	r24, 0xB8	; 184
 3e4:	9b 40       	sbci	r25, 0x0B	; 11
 3e6:	a1 05       	cpc	r26, r1
 3e8:	b1 05       	cpc	r27, r1
 3ea:	08 f5       	brcc	.+66     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
		UpdateButtonVals();
 3ec:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_Z16UpdateButtonValsv>
		byte button = checkButton();
 3f0:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_Z11checkButtonv>
 3f4:	c8 2f       	mov	r28, r24

		if (button != CHOICE_NONE) {
 3f6:	88 23       	and	r24, r24
 3f8:	61 f3       	breq	.-40     	; 0x3d2 <_Z13waitForButtonv+0x12>
			setLEDs(button); //Turn on a given LED
 3fa:	0e 94 9d 01 	call	0x33a	; 0x33a <_Z7setLEDsh>
			delay(150);
 3fe:	66 e9       	ldi	r22, 0x96	; 150
 400:	70 e0       	ldi	r23, 0x00	; 0
 402:	80 e0       	ldi	r24, 0x00	; 0
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	0e 94 a0 03 	call	0x740	; 0x740 <delay>
			setLEDs(CHOICE_OFF); // Turn off all LEDs
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	0e 94 9d 01 	call	0x33a	; 0x33a <_Z7setLEDsh>
			
			while(checkButton() != CHOICE_NONE) {UpdateButtonVals();}  // Now let's wait for user to release button			
 410:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_Z11checkButtonv>
 414:	88 23       	and	r24, r24
 416:	19 f0       	breq	.+6      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 418:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_Z16UpdateButtonValsv>
 41c:	f9 cf       	rjmp	.-14     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
			delay(10); 
 41e:	6a e0       	ldi	r22, 0x0A	; 10
 420:	70 e0       	ldi	r23, 0x00	; 0
 422:	80 e0       	ldi	r24, 0x00	; 0
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	0e 94 a0 03 	call	0x740	; 0x740 <delay>
	long startTime = millis(); // Remember the time we started the this loop

	// Loop until too much time has passed 
	while ( (millis() - startTime) < ENTRY_TIME_LIMIT) {
		UpdateButtonVals();
		byte button = checkButton();
 42a:	8c 2f       	mov	r24, r28
			setLEDs(CHOICE_OFF); // Turn off all LEDs
			
			while(checkButton() != CHOICE_NONE) {UpdateButtonVals();}  // Now let's wait for user to release button			
			delay(10); 

			return button;
 42c:	01 c0       	rjmp	.+2      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		}
	}

	return CHOICE_NONE; // If we get here, we've timed out!
 42e:	80 e0       	ldi	r24, 0x00	; 0
}
 430:	cf 91       	pop	r28
 432:	ff 90       	pop	r15
 434:	ef 90       	pop	r14
 436:	df 90       	pop	r13
 438:	cf 90       	pop	r12
 43a:	08 95       	ret

0000043c <_Z10playMemoryv>:
	}
}

// Play the regular memory game
// Returns 0 if player loses, or 1 if player wins
boolean playMemory(void) {
 43c:	cf 92       	push	r12
 43e:	df 92       	push	r13
 440:	ef 92       	push	r14
 442:	ff 92       	push	r15
 444:	cf 93       	push	r28
	randomSeed(millis()+analogRead(A4)); // Seed the random generator with random amount of millis()
 446:	0e 94 6f 03 	call	0x6de	; 0x6de <millis>
 44a:	6b 01       	movw	r12, r22
 44c:	7c 01       	movw	r14, r24
 44e:	82 e1       	ldi	r24, 0x12	; 18
 450:	0e 94 17 04 	call	0x82e	; 0x82e <analogRead>
 454:	09 2e       	mov	r0, r25
 456:	00 0c       	add	r0, r0
 458:	aa 0b       	sbc	r26, r26
 45a:	bb 0b       	sbc	r27, r27
 45c:	bc 01       	movw	r22, r24
 45e:	cd 01       	movw	r24, r26
 460:	6c 0d       	add	r22, r12
 462:	7d 1d       	adc	r23, r13
 464:	8e 1d       	adc	r24, r14
 466:	9f 1d       	adc	r25, r15
 468:	0e 94 c8 04 	call	0x990	; 0x990 <_Z10randomSeedm>
	gameRound = 0; // Reset the game to the beginning
 46c:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <gameRound>

	while (gameRound < ROUNDS_TO_WIN) {
 470:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <gameRound>
 474:	8d 30       	cpi	r24, 0x0D	; 13
 476:	e8 f4       	brcc	.+58     	; 0x4b2 <_Z10playMemoryv+0x76>
		addToMoves(); // Add a button to the current moves, then play them back
 478:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z10addToMovesv>

		playMoves(); // Play back the current game board
 47c:	0e 94 c0 01 	call	0x380	; 0x380 <_Z9playMovesv>

		// Then require the player to repeat the sequence.
		for (byte currentMove = 0 ; currentMove < gameRound ; currentMove++) {
 480:	c0 e0       	ldi	r28, 0x00	; 0
 482:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <gameRound>
 486:	c8 17       	cp	r28, r24
 488:	68 f4       	brcc	.+26     	; 0x4a4 <_Z10playMemoryv+0x68>
			byte choice = waitForButton(); // See what button the user presses
 48a:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <_Z13waitForButtonv>
			if (choice == 0) 
 48e:	88 23       	and	r24, r24
 490:	91 f0       	breq	.+36     	; 0x4b6 <_Z10playMemoryv+0x7a>
				return false; // If wait timed out, player loses
			if (choice != gameBoard[currentMove]) 
 492:	ec 2f       	mov	r30, r28
 494:	f0 e0       	ldi	r31, 0x00	; 0
 496:	ed 5e       	subi	r30, 0xED	; 237
 498:	fe 4f       	sbci	r31, 0xFE	; 254
 49a:	90 81       	ld	r25, Z
 49c:	89 13       	cpse	r24, r25
 49e:	0b c0       	rjmp	.+22     	; 0x4b6 <_Z10playMemoryv+0x7a>
		addToMoves(); // Add a button to the current moves, then play them back

		playMoves(); // Play back the current game board

		// Then require the player to repeat the sequence.
		for (byte currentMove = 0 ; currentMove < gameRound ; currentMove++) {
 4a0:	cf 5f       	subi	r28, 0xFF	; 255
 4a2:	ef cf       	rjmp	.-34     	; 0x482 <_Z10playMemoryv+0x46>
				return false; // If wait timed out, player loses
			if (choice != gameBoard[currentMove]) 
				return false; // If the choice is incorrect, player loses
		}

		delay(1000); // Player was correct, delay before playing moves
 4a4:	68 ee       	ldi	r22, 0xE8	; 232
 4a6:	73 e0       	ldi	r23, 0x03	; 3
 4a8:	80 e0       	ldi	r24, 0x00	; 0
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	0e 94 a0 03 	call	0x740	; 0x740 <delay>
// Returns 0 if player loses, or 1 if player wins
boolean playMemory(void) {
	randomSeed(millis()+analogRead(A4)); // Seed the random generator with random amount of millis()
	gameRound = 0; // Reset the game to the beginning

	while (gameRound < ROUNDS_TO_WIN) {
 4b0:	df cf       	rjmp	.-66     	; 0x470 <_Z10playMemoryv+0x34>
		}

		delay(1000); // Player was correct, delay before playing moves
	}

	return true; // Player made it through all the rounds to win!
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	01 c0       	rjmp	.+2      	; 0x4b8 <_Z10playMemoryv+0x7c>

		// Then require the player to repeat the sequence.
		for (byte currentMove = 0 ; currentMove < gameRound ; currentMove++) {
			byte choice = waitForButton(); // See what button the user presses
			if (choice == 0) 
				return false; // If wait timed out, player loses
 4b6:	80 e0       	ldi	r24, 0x00	; 0

		delay(1000); // Player was correct, delay before playing moves
	}

	return true; // Player made it through all the rounds to win!
}
 4b8:	cf 91       	pop	r28
 4ba:	ff 90       	pop	r15
 4bc:	ef 90       	pop	r14
 4be:	df 90       	pop	r13
 4c0:	cf 90       	pop	r12
 4c2:	08 95       	ret

000004c4 <_Z10playWinnerv>:
		digitalWrite(LED_YELLOW, LOW);
}

// Play the winner sound and lights
void playWinner(void) {
	setLEDs(CHOICE_GREEN | CHOICE_BLUE);
 4c4:	86 e0       	ldi	r24, 0x06	; 6
 4c6:	0e 94 9d 01 	call	0x33a	; 0x33a <_Z7setLEDsh>
	delay(20);
 4ca:	64 e1       	ldi	r22, 0x14	; 20
 4cc:	70 e0       	ldi	r23, 0x00	; 0
 4ce:	80 e0       	ldi	r24, 0x00	; 0
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	0e 94 a0 03 	call	0x740	; 0x740 <delay>
	setLEDs(CHOICE_RED | CHOICE_YELLOW);
 4d6:	89 e0       	ldi	r24, 0x09	; 9
 4d8:	0e 94 9d 01 	call	0x33a	; 0x33a <_Z7setLEDsh>
	delay(20);
 4dc:	64 e1       	ldi	r22, 0x14	; 20
 4de:	70 e0       	ldi	r23, 0x00	; 0
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	0e 94 a0 03 	call	0x740	; 0x740 <delay>
	setLEDs(CHOICE_GREEN | CHOICE_BLUE);
 4e8:	86 e0       	ldi	r24, 0x06	; 6
 4ea:	0e 94 9d 01 	call	0x33a	; 0x33a <_Z7setLEDsh>
	delay(20);
 4ee:	64 e1       	ldi	r22, 0x14	; 20
 4f0:	70 e0       	ldi	r23, 0x00	; 0
 4f2:	80 e0       	ldi	r24, 0x00	; 0
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	0e 94 a0 03 	call	0x740	; 0x740 <delay>
	setLEDs(CHOICE_RED | CHOICE_YELLOW);
 4fa:	89 e0       	ldi	r24, 0x09	; 9
 4fc:	0e 94 9d 01 	call	0x33a	; 0x33a <_Z7setLEDsh>
	delay(20);
 500:	64 e1       	ldi	r22, 0x14	; 20
 502:	70 e0       	ldi	r23, 0x00	; 0
 504:	80 e0       	ldi	r24, 0x00	; 0
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	0c 94 a0 03 	jmp	0x740	; 0x740 <delay>

0000050c <_Z9playLoserv>:
}

void playLoser(void) {
	setLEDs(CHOICE_RED | CHOICE_GREEN);
 50c:	83 e0       	ldi	r24, 0x03	; 3
 50e:	0e 94 9d 01 	call	0x33a	; 0x33a <_Z7setLEDsh>
	delay(250);
 512:	6a ef       	ldi	r22, 0xFA	; 250
 514:	70 e0       	ldi	r23, 0x00	; 0
 516:	80 e0       	ldi	r24, 0x00	; 0
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	0e 94 a0 03 	call	0x740	; 0x740 <delay>
	setLEDs(CHOICE_BLUE | CHOICE_YELLOW);
 51e:	8c e0       	ldi	r24, 0x0C	; 12
 520:	0e 94 9d 01 	call	0x33a	; 0x33a <_Z7setLEDsh>
	delay(250);
 524:	6a ef       	ldi	r22, 0xFA	; 250
 526:	70 e0       	ldi	r23, 0x00	; 0
 528:	80 e0       	ldi	r24, 0x00	; 0
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	0e 94 a0 03 	call	0x740	; 0x740 <delay>
	setLEDs(CHOICE_RED | CHOICE_GREEN);
 530:	83 e0       	ldi	r24, 0x03	; 3
 532:	0e 94 9d 01 	call	0x33a	; 0x33a <_Z7setLEDsh>
	delay(250);
 536:	6a ef       	ldi	r22, 0xFA	; 250
 538:	70 e0       	ldi	r23, 0x00	; 0
 53a:	80 e0       	ldi	r24, 0x00	; 0
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	0e 94 a0 03 	call	0x740	; 0x740 <delay>
	setLEDs(CHOICE_BLUE | CHOICE_YELLOW);
 542:	8c e0       	ldi	r24, 0x0C	; 12
 544:	0e 94 9d 01 	call	0x33a	; 0x33a <_Z7setLEDsh>
	delay(250);
 548:	6a ef       	ldi	r22, 0xFA	; 250
 54a:	70 e0       	ldi	r23, 0x00	; 0
 54c:	80 e0       	ldi	r24, 0x00	; 0
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	0c 94 a0 03 	jmp	0x740	; 0x740 <delay>

00000554 <_Z11attractModev>:
}

// Show an "attract mode" display while waiting for user to press button.
void attractMode(void) {
  while(1) {
	UpdateButtonVals();
 554:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_Z16UpdateButtonValsv>
    setLEDs(CHOICE_RED);
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	0e 94 9d 01 	call	0x33a	; 0x33a <_Z7setLEDsh>
    delay(100);
 55e:	64 e6       	ldi	r22, 0x64	; 100
 560:	70 e0       	ldi	r23, 0x00	; 0
 562:	80 e0       	ldi	r24, 0x00	; 0
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	0e 94 a0 03 	call	0x740	; 0x740 <delay>
    if (checkButton() != CHOICE_NONE) return;
 56a:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_Z11checkButtonv>
 56e:	81 11       	cpse	r24, r1
 570:	2d c0       	rjmp	.+90     	; 0x5cc <_Z11attractModev+0x78>
	UpdateButtonVals();
 572:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_Z16UpdateButtonValsv>
    setLEDs(CHOICE_BLUE);
 576:	84 e0       	ldi	r24, 0x04	; 4
 578:	0e 94 9d 01 	call	0x33a	; 0x33a <_Z7setLEDsh>
    delay(100);
 57c:	64 e6       	ldi	r22, 0x64	; 100
 57e:	70 e0       	ldi	r23, 0x00	; 0
 580:	80 e0       	ldi	r24, 0x00	; 0
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	0e 94 a0 03 	call	0x740	; 0x740 <delay>
    if (checkButton() != CHOICE_NONE) return;
 588:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_Z11checkButtonv>
 58c:	81 11       	cpse	r24, r1
 58e:	1e c0       	rjmp	.+60     	; 0x5cc <_Z11attractModev+0x78>
	UpdateButtonVals();
 590:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_Z16UpdateButtonValsv>
    setLEDs(CHOICE_GREEN);
 594:	82 e0       	ldi	r24, 0x02	; 2
 596:	0e 94 9d 01 	call	0x33a	; 0x33a <_Z7setLEDsh>
    delay(100);
 59a:	64 e6       	ldi	r22, 0x64	; 100
 59c:	70 e0       	ldi	r23, 0x00	; 0
 59e:	80 e0       	ldi	r24, 0x00	; 0
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	0e 94 a0 03 	call	0x740	; 0x740 <delay>
    if (checkButton() != CHOICE_NONE) return;
 5a6:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_Z11checkButtonv>
 5aa:	81 11       	cpse	r24, r1
 5ac:	0f c0       	rjmp	.+30     	; 0x5cc <_Z11attractModev+0x78>
	UpdateButtonVals();
 5ae:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_Z16UpdateButtonValsv>
    setLEDs(CHOICE_YELLOW);
 5b2:	88 e0       	ldi	r24, 0x08	; 8
 5b4:	0e 94 9d 01 	call	0x33a	; 0x33a <_Z7setLEDsh>
    delay(100);
 5b8:	64 e6       	ldi	r22, 0x64	; 100
 5ba:	70 e0       	ldi	r23, 0x00	; 0
 5bc:	80 e0       	ldi	r24, 0x00	; 0
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	0e 94 a0 03 	call	0x740	; 0x740 <delay>
    if (checkButton() != CHOICE_NONE) return;
 5c4:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_Z11checkButtonv>
 5c8:	88 23       	and	r24, r24
 5ca:	21 f2       	breq	.-120    	; 0x554 <_Z11attractModev>
 5cc:	08 95       	ret

000005ce <loop>:
	digitalWrite(10,LOW);
	digitalWrite(11,LOW);
	digitalWrite(12,LOW);
}
 
void loop() { 
 5ce:	cf 93       	push	r28
 5d0:	df 93       	push	r29
 5d2:	ca e0       	ldi	r28, 0x0A	; 10
 5d4:	d0 e0       	ldi	r29, 0x00	; 0
	for(int i = 0; i < 10; i++){
		UpdateButtonVals();
 5d6:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_Z16UpdateButtonValsv>
 5da:	21 97       	sbiw	r28, 0x01	; 1
	digitalWrite(11,LOW);
	digitalWrite(12,LOW);
}
 
void loop() { 
	for(int i = 0; i < 10; i++){
 5dc:	e1 f7       	brne	.-8      	; 0x5d6 <loop+0x8>
		UpdateButtonVals();
	}	

	attractMode();
 5de:	0e 94 aa 02 	call	0x554	; 0x554 <_Z11attractModev>
	// Indicate the start of game play
	setLEDs(CHOICE_RED | CHOICE_GREEN | CHOICE_BLUE | CHOICE_YELLOW); // Turn all LEDs on
 5e2:	8f e0       	ldi	r24, 0x0F	; 15
 5e4:	0e 94 9d 01 	call	0x33a	; 0x33a <_Z7setLEDsh>
	delay(1000);
 5e8:	68 ee       	ldi	r22, 0xE8	; 232
 5ea:	73 e0       	ldi	r23, 0x03	; 3
 5ec:	80 e0       	ldi	r24, 0x00	; 0
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	0e 94 a0 03 	call	0x740	; 0x740 <delay>
	setLEDs(CHOICE_OFF); // Turn off LEDs
 5f4:	80 e0       	ldi	r24, 0x00	; 0
 5f6:	0e 94 9d 01 	call	0x33a	; 0x33a <_Z7setLEDsh>
	delay(250);
 5fa:	6a ef       	ldi	r22, 0xFA	; 250
 5fc:	70 e0       	ldi	r23, 0x00	; 0
 5fe:	80 e0       	ldi	r24, 0x00	; 0
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	0e 94 a0 03 	call	0x740	; 0x740 <delay>

    // Play memory game and handle result
    if (playMemory() == true)
 606:	0e 94 1e 02 	call	0x43c	; 0x43c <_Z10playMemoryv>
 60a:	88 23       	and	r24, r24
 60c:	21 f0       	breq	.+8      	; 0x616 <loop+0x48>
		playWinner(); // Player won, play winner tones
    else {
		playLoser(); // Player lost, play loser tones    
		delay(300);
	}
}
 60e:	df 91       	pop	r29
 610:	cf 91       	pop	r28
	setLEDs(CHOICE_OFF); // Turn off LEDs
	delay(250);

    // Play memory game and handle result
    if (playMemory() == true)
		playWinner(); // Player won, play winner tones
 612:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <_Z10playWinnerv>
    else {
		playLoser(); // Player lost, play loser tones    
 616:	0e 94 86 02 	call	0x50c	; 0x50c <_Z9playLoserv>
		delay(300);
 61a:	6c e2       	ldi	r22, 0x2C	; 44
 61c:	71 e0       	ldi	r23, 0x01	; 1
 61e:	80 e0       	ldi	r24, 0x00	; 0
 620:	90 e0       	ldi	r25, 0x00	; 0
	}
}
 622:	df 91       	pop	r29
 624:	cf 91       	pop	r28
    // Play memory game and handle result
    if (playMemory() == true)
		playWinner(); // Player won, play winner tones
    else {
		playLoser(); // Player lost, play loser tones    
		delay(300);
 626:	0c 94 a0 03 	jmp	0x740	; 0x740 <delay>

0000062a <initVariant>:
 62a:	08 95       	ret

0000062c <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 62c:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <init>

	initVariant();
 630:	0e 94 15 03 	call	0x62a	; 0x62a <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 634:	0e 94 7b 00 	call	0xf6	; 0xf6 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 638:	c0 e0       	ldi	r28, 0x00	; 0
 63a:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 63c:	0e 94 e7 02 	call	0x5ce	; 0x5ce <loop>
		if (serialEventRun) serialEventRun();
 640:	20 97       	sbiw	r28, 0x00	; 0
 642:	e1 f3       	breq	.-8      	; 0x63c <main+0x10>
 644:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 648:	f9 cf       	rjmp	.-14     	; 0x63c <main+0x10>

0000064a <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 64a:	1f 92       	push	r1
 64c:	0f 92       	push	r0
 64e:	0f b6       	in	r0, 0x3f	; 63
 650:	0f 92       	push	r0
 652:	11 24       	eor	r1, r1
 654:	2f 93       	push	r18
 656:	3f 93       	push	r19
 658:	8f 93       	push	r24
 65a:	9f 93       	push	r25
 65c:	af 93       	push	r26
 65e:	bf 93       	push	r27
 660:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <timer0_millis>
 664:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <timer0_millis+0x1>
 668:	a0 91 3e 01 	lds	r26, 0x013E	; 0x80013e <timer0_millis+0x2>
 66c:	b0 91 3f 01 	lds	r27, 0x013F	; 0x80013f <timer0_millis+0x3>
 670:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <timer0_fract>
 674:	23 e0       	ldi	r18, 0x03	; 3
 676:	23 0f       	add	r18, r19
 678:	2d 37       	cpi	r18, 0x7D	; 125
 67a:	20 f4       	brcc	.+8      	; 0x684 <__vector_16+0x3a>
 67c:	01 96       	adiw	r24, 0x01	; 1
 67e:	a1 1d       	adc	r26, r1
 680:	b1 1d       	adc	r27, r1
 682:	05 c0       	rjmp	.+10     	; 0x68e <__vector_16+0x44>
 684:	26 e8       	ldi	r18, 0x86	; 134
 686:	23 0f       	add	r18, r19
 688:	02 96       	adiw	r24, 0x02	; 2
 68a:	a1 1d       	adc	r26, r1
 68c:	b1 1d       	adc	r27, r1
 68e:	20 93 3b 01 	sts	0x013B, r18	; 0x80013b <timer0_fract>
 692:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <timer0_millis>
 696:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <timer0_millis+0x1>
 69a:	a0 93 3e 01 	sts	0x013E, r26	; 0x80013e <timer0_millis+0x2>
 69e:	b0 93 3f 01 	sts	0x013F, r27	; 0x80013f <timer0_millis+0x3>
 6a2:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <timer0_overflow_count>
 6a6:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <timer0_overflow_count+0x1>
 6aa:	a0 91 42 01 	lds	r26, 0x0142	; 0x800142 <timer0_overflow_count+0x2>
 6ae:	b0 91 43 01 	lds	r27, 0x0143	; 0x800143 <timer0_overflow_count+0x3>
 6b2:	01 96       	adiw	r24, 0x01	; 1
 6b4:	a1 1d       	adc	r26, r1
 6b6:	b1 1d       	adc	r27, r1
 6b8:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <timer0_overflow_count>
 6bc:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <timer0_overflow_count+0x1>
 6c0:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <timer0_overflow_count+0x2>
 6c4:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <timer0_overflow_count+0x3>
 6c8:	bf 91       	pop	r27
 6ca:	af 91       	pop	r26
 6cc:	9f 91       	pop	r25
 6ce:	8f 91       	pop	r24
 6d0:	3f 91       	pop	r19
 6d2:	2f 91       	pop	r18
 6d4:	0f 90       	pop	r0
 6d6:	0f be       	out	0x3f, r0	; 63
 6d8:	0f 90       	pop	r0
 6da:	1f 90       	pop	r1
 6dc:	18 95       	reti

000006de <millis>:
 6de:	2f b7       	in	r18, 0x3f	; 63
 6e0:	f8 94       	cli
 6e2:	60 91 3c 01 	lds	r22, 0x013C	; 0x80013c <timer0_millis>
 6e6:	70 91 3d 01 	lds	r23, 0x013D	; 0x80013d <timer0_millis+0x1>
 6ea:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <timer0_millis+0x2>
 6ee:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <timer0_millis+0x3>
 6f2:	2f bf       	out	0x3f, r18	; 63
 6f4:	08 95       	ret

000006f6 <micros>:
 6f6:	3f b7       	in	r19, 0x3f	; 63
 6f8:	f8 94       	cli
 6fa:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <timer0_overflow_count>
 6fe:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <timer0_overflow_count+0x1>
 702:	a0 91 42 01 	lds	r26, 0x0142	; 0x800142 <timer0_overflow_count+0x2>
 706:	b0 91 43 01 	lds	r27, 0x0143	; 0x800143 <timer0_overflow_count+0x3>
 70a:	26 b5       	in	r18, 0x26	; 38
 70c:	a8 9b       	sbis	0x15, 0	; 21
 70e:	05 c0       	rjmp	.+10     	; 0x71a <micros+0x24>
 710:	2f 3f       	cpi	r18, 0xFF	; 255
 712:	19 f0       	breq	.+6      	; 0x71a <micros+0x24>
 714:	01 96       	adiw	r24, 0x01	; 1
 716:	a1 1d       	adc	r26, r1
 718:	b1 1d       	adc	r27, r1
 71a:	3f bf       	out	0x3f, r19	; 63
 71c:	ba 2f       	mov	r27, r26
 71e:	a9 2f       	mov	r26, r25
 720:	98 2f       	mov	r25, r24
 722:	88 27       	eor	r24, r24
 724:	82 0f       	add	r24, r18
 726:	91 1d       	adc	r25, r1
 728:	a1 1d       	adc	r26, r1
 72a:	b1 1d       	adc	r27, r1
 72c:	bc 01       	movw	r22, r24
 72e:	cd 01       	movw	r24, r26
 730:	42 e0       	ldi	r20, 0x02	; 2
 732:	66 0f       	add	r22, r22
 734:	77 1f       	adc	r23, r23
 736:	88 1f       	adc	r24, r24
 738:	99 1f       	adc	r25, r25
 73a:	4a 95       	dec	r20
 73c:	d1 f7       	brne	.-12     	; 0x732 <micros+0x3c>
 73e:	08 95       	ret

00000740 <delay>:
 740:	8f 92       	push	r8
 742:	9f 92       	push	r9
 744:	af 92       	push	r10
 746:	bf 92       	push	r11
 748:	cf 92       	push	r12
 74a:	df 92       	push	r13
 74c:	ef 92       	push	r14
 74e:	ff 92       	push	r15
 750:	6b 01       	movw	r12, r22
 752:	7c 01       	movw	r14, r24
 754:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <micros>
 758:	4b 01       	movw	r8, r22
 75a:	5c 01       	movw	r10, r24
 75c:	c1 14       	cp	r12, r1
 75e:	d1 04       	cpc	r13, r1
 760:	e1 04       	cpc	r14, r1
 762:	f1 04       	cpc	r15, r1
 764:	01 f1       	breq	.+64     	; 0x7a6 <delay+0x66>
 766:	0e 94 5b 05 	call	0xab6	; 0xab6 <yield>
 76a:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <micros>
 76e:	dc 01       	movw	r26, r24
 770:	cb 01       	movw	r24, r22
 772:	88 19       	sub	r24, r8
 774:	99 09       	sbc	r25, r9
 776:	aa 09       	sbc	r26, r10
 778:	bb 09       	sbc	r27, r11
 77a:	88 3e       	cpi	r24, 0xE8	; 232
 77c:	93 40       	sbci	r25, 0x03	; 3
 77e:	a1 05       	cpc	r26, r1
 780:	b1 05       	cpc	r27, r1
 782:	60 f3       	brcs	.-40     	; 0x75c <delay+0x1c>
 784:	21 e0       	ldi	r18, 0x01	; 1
 786:	c2 1a       	sub	r12, r18
 788:	d1 08       	sbc	r13, r1
 78a:	e1 08       	sbc	r14, r1
 78c:	f1 08       	sbc	r15, r1
 78e:	88 ee       	ldi	r24, 0xE8	; 232
 790:	88 0e       	add	r8, r24
 792:	83 e0       	ldi	r24, 0x03	; 3
 794:	98 1e       	adc	r9, r24
 796:	a1 1c       	adc	r10, r1
 798:	b1 1c       	adc	r11, r1
 79a:	c1 14       	cp	r12, r1
 79c:	d1 04       	cpc	r13, r1
 79e:	e1 04       	cpc	r14, r1
 7a0:	f1 04       	cpc	r15, r1
 7a2:	19 f7       	brne	.-58     	; 0x76a <delay+0x2a>
 7a4:	db cf       	rjmp	.-74     	; 0x75c <delay+0x1c>
 7a6:	ff 90       	pop	r15
 7a8:	ef 90       	pop	r14
 7aa:	df 90       	pop	r13
 7ac:	cf 90       	pop	r12
 7ae:	bf 90       	pop	r11
 7b0:	af 90       	pop	r10
 7b2:	9f 90       	pop	r9
 7b4:	8f 90       	pop	r8
 7b6:	08 95       	ret

000007b8 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 7b8:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 7ba:	84 b5       	in	r24, 0x24	; 36
 7bc:	82 60       	ori	r24, 0x02	; 2
 7be:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 7c0:	84 b5       	in	r24, 0x24	; 36
 7c2:	81 60       	ori	r24, 0x01	; 1
 7c4:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 7c6:	85 b5       	in	r24, 0x25	; 37
 7c8:	82 60       	ori	r24, 0x02	; 2
 7ca:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 7cc:	85 b5       	in	r24, 0x25	; 37
 7ce:	81 60       	ori	r24, 0x01	; 1
 7d0:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 7d2:	ee e6       	ldi	r30, 0x6E	; 110
 7d4:	f0 e0       	ldi	r31, 0x00	; 0
 7d6:	80 81       	ld	r24, Z
 7d8:	81 60       	ori	r24, 0x01	; 1
 7da:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 7dc:	e1 e8       	ldi	r30, 0x81	; 129
 7de:	f0 e0       	ldi	r31, 0x00	; 0
 7e0:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 7e2:	80 81       	ld	r24, Z
 7e4:	82 60       	ori	r24, 0x02	; 2
 7e6:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 7e8:	80 81       	ld	r24, Z
 7ea:	81 60       	ori	r24, 0x01	; 1
 7ec:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 7ee:	e0 e8       	ldi	r30, 0x80	; 128
 7f0:	f0 e0       	ldi	r31, 0x00	; 0
 7f2:	80 81       	ld	r24, Z
 7f4:	81 60       	ori	r24, 0x01	; 1
 7f6:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 7f8:	e1 eb       	ldi	r30, 0xB1	; 177
 7fa:	f0 e0       	ldi	r31, 0x00	; 0
 7fc:	80 81       	ld	r24, Z
 7fe:	84 60       	ori	r24, 0x04	; 4
 800:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 802:	e0 eb       	ldi	r30, 0xB0	; 176
 804:	f0 e0       	ldi	r31, 0x00	; 0
 806:	80 81       	ld	r24, Z
 808:	81 60       	ori	r24, 0x01	; 1
 80a:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 80c:	ea e7       	ldi	r30, 0x7A	; 122
 80e:	f0 e0       	ldi	r31, 0x00	; 0
 810:	80 81       	ld	r24, Z
 812:	84 60       	ori	r24, 0x04	; 4
 814:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 816:	80 81       	ld	r24, Z
 818:	82 60       	ori	r24, 0x02	; 2
 81a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 81c:	80 81       	ld	r24, Z
 81e:	81 60       	ori	r24, 0x01	; 1
 820:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 822:	80 81       	ld	r24, Z
 824:	80 68       	ori	r24, 0x80	; 128
 826:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 828:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 82c:	08 95       	ret

0000082e <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
 82e:	8e 30       	cpi	r24, 0x0E	; 14
 830:	08 f0       	brcs	.+2      	; 0x834 <analogRead+0x6>
 832:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
 834:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <analog_reference>
 838:	90 e4       	ldi	r25, 0x40	; 64
 83a:	29 9f       	mul	r18, r25
 83c:	90 01       	movw	r18, r0
 83e:	11 24       	eor	r1, r1
 840:	87 70       	andi	r24, 0x07	; 7
 842:	82 2b       	or	r24, r18
 844:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
 848:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 84c:	80 64       	ori	r24, 0x40	; 64
 84e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
 852:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 856:	86 fd       	sbrc	r24, 6
 858:	fc cf       	rjmp	.-8      	; 0x852 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
 85a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
 85e:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
 862:	90 e0       	ldi	r25, 0x00	; 0
}
 864:	92 2b       	or	r25, r18
 866:	08 95       	ret

00000868 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 868:	83 30       	cpi	r24, 0x03	; 3
 86a:	81 f0       	breq	.+32     	; 0x88c <turnOffPWM+0x24>
 86c:	28 f4       	brcc	.+10     	; 0x878 <turnOffPWM+0x10>
 86e:	81 30       	cpi	r24, 0x01	; 1
 870:	99 f0       	breq	.+38     	; 0x898 <turnOffPWM+0x30>
 872:	82 30       	cpi	r24, 0x02	; 2
 874:	a1 f0       	breq	.+40     	; 0x89e <turnOffPWM+0x36>
 876:	08 95       	ret
 878:	87 30       	cpi	r24, 0x07	; 7
 87a:	a9 f0       	breq	.+42     	; 0x8a6 <turnOffPWM+0x3e>
 87c:	88 30       	cpi	r24, 0x08	; 8
 87e:	b9 f0       	breq	.+46     	; 0x8ae <turnOffPWM+0x46>
 880:	84 30       	cpi	r24, 0x04	; 4
 882:	d1 f4       	brne	.+52     	; 0x8b8 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 884:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 888:	8f 7d       	andi	r24, 0xDF	; 223
 88a:	03 c0       	rjmp	.+6      	; 0x892 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 88c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 890:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 892:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 896:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 898:	84 b5       	in	r24, 0x24	; 36
 89a:	8f 77       	andi	r24, 0x7F	; 127
 89c:	02 c0       	rjmp	.+4      	; 0x8a2 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 89e:	84 b5       	in	r24, 0x24	; 36
 8a0:	8f 7d       	andi	r24, 0xDF	; 223
 8a2:	84 bd       	out	0x24, r24	; 36
 8a4:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 8a6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 8aa:	8f 77       	andi	r24, 0x7F	; 127
 8ac:	03 c0       	rjmp	.+6      	; 0x8b4 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 8ae:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 8b2:	8f 7d       	andi	r24, 0xDF	; 223
 8b4:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 8b8:	08 95       	ret

000008ba <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 8ba:	cf 93       	push	r28
 8bc:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 8be:	90 e0       	ldi	r25, 0x00	; 0
 8c0:	fc 01       	movw	r30, r24
 8c2:	e4 58       	subi	r30, 0x84	; 132
 8c4:	ff 4f       	sbci	r31, 0xFF	; 255
 8c6:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 8c8:	fc 01       	movw	r30, r24
 8ca:	e0 57       	subi	r30, 0x70	; 112
 8cc:	ff 4f       	sbci	r31, 0xFF	; 255
 8ce:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 8d0:	88 23       	and	r24, r24
 8d2:	61 f1       	breq	.+88     	; 0x92c <__stack+0x2d>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 8d4:	90 e0       	ldi	r25, 0x00	; 0
 8d6:	88 0f       	add	r24, r24
 8d8:	99 1f       	adc	r25, r25
 8da:	fc 01       	movw	r30, r24
 8dc:	e2 55       	subi	r30, 0x52	; 82
 8de:	ff 4f       	sbci	r31, 0xFF	; 255
 8e0:	c5 91       	lpm	r28, Z+
 8e2:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 8e4:	fc 01       	movw	r30, r24
 8e6:	ec 55       	subi	r30, 0x5C	; 92
 8e8:	ff 4f       	sbci	r31, 0xFF	; 255
 8ea:	a5 91       	lpm	r26, Z+
 8ec:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 8ee:	61 11       	cpse	r22, r1
 8f0:	09 c0       	rjmp	.+18     	; 0x904 <__stack+0x5>
		uint8_t oldSREG = SREG;
 8f2:	9f b7       	in	r25, 0x3f	; 63
                cli();
 8f4:	f8 94       	cli
		*reg &= ~bit;
 8f6:	88 81       	ld	r24, Y
 8f8:	20 95       	com	r18
 8fa:	82 23       	and	r24, r18
 8fc:	88 83       	st	Y, r24
		*out &= ~bit;
 8fe:	ec 91       	ld	r30, X
 900:	2e 23       	and	r18, r30
 902:	0b c0       	rjmp	.+22     	; 0x91a <__stack+0x1b>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 904:	62 30       	cpi	r22, 0x02	; 2
 906:	61 f4       	brne	.+24     	; 0x920 <__stack+0x21>
		uint8_t oldSREG = SREG;
 908:	9f b7       	in	r25, 0x3f	; 63
                cli();
 90a:	f8 94       	cli
		*reg &= ~bit;
 90c:	88 81       	ld	r24, Y
 90e:	32 2f       	mov	r19, r18
 910:	30 95       	com	r19
 912:	83 23       	and	r24, r19
 914:	88 83       	st	Y, r24
		*out |= bit;
 916:	ec 91       	ld	r30, X
 918:	2e 2b       	or	r18, r30
 91a:	2c 93       	st	X, r18
		SREG = oldSREG;
 91c:	9f bf       	out	0x3f, r25	; 63
 91e:	06 c0       	rjmp	.+12     	; 0x92c <__stack+0x2d>
	} else {
		uint8_t oldSREG = SREG;
 920:	8f b7       	in	r24, 0x3f	; 63
                cli();
 922:	f8 94       	cli
		*reg |= bit;
 924:	e8 81       	ld	r30, Y
 926:	2e 2b       	or	r18, r30
 928:	28 83       	st	Y, r18
		SREG = oldSREG;
 92a:	8f bf       	out	0x3f, r24	; 63
	}
}
 92c:	df 91       	pop	r29
 92e:	cf 91       	pop	r28
 930:	08 95       	ret

00000932 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 932:	1f 93       	push	r17
 934:	cf 93       	push	r28
 936:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 938:	28 2f       	mov	r18, r24
 93a:	30 e0       	ldi	r19, 0x00	; 0
 93c:	f9 01       	movw	r30, r18
 93e:	e8 59       	subi	r30, 0x98	; 152
 940:	ff 4f       	sbci	r31, 0xFF	; 255
 942:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 944:	f9 01       	movw	r30, r18
 946:	e4 58       	subi	r30, 0x84	; 132
 948:	ff 4f       	sbci	r31, 0xFF	; 255
 94a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 94c:	f9 01       	movw	r30, r18
 94e:	e0 57       	subi	r30, 0x70	; 112
 950:	ff 4f       	sbci	r31, 0xFF	; 255
 952:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 954:	cc 23       	and	r28, r28
 956:	c1 f0       	breq	.+48     	; 0x988 <digitalWrite+0x56>
 958:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 95a:	81 11       	cpse	r24, r1
 95c:	0e 94 34 04 	call	0x868	; 0x868 <turnOffPWM>

	out = portOutputRegister(port);
 960:	ec 2f       	mov	r30, r28
 962:	f0 e0       	ldi	r31, 0x00	; 0
 964:	ee 0f       	add	r30, r30
 966:	ff 1f       	adc	r31, r31
 968:	ec 55       	subi	r30, 0x5C	; 92
 96a:	ff 4f       	sbci	r31, 0xFF	; 255
 96c:	a5 91       	lpm	r26, Z+
 96e:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 970:	9f b7       	in	r25, 0x3f	; 63
	cli();
 972:	f8 94       	cli

	if (val == LOW) {
 974:	11 11       	cpse	r17, r1
 976:	04 c0       	rjmp	.+8      	; 0x980 <digitalWrite+0x4e>
		*out &= ~bit;
 978:	8c 91       	ld	r24, X
 97a:	d0 95       	com	r29
 97c:	d8 23       	and	r29, r24
 97e:	02 c0       	rjmp	.+4      	; 0x984 <digitalWrite+0x52>
	} else {
		*out |= bit;
 980:	ec 91       	ld	r30, X
 982:	de 2b       	or	r29, r30
 984:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
 986:	9f bf       	out	0x3f, r25	; 63
}
 988:	df 91       	pop	r29
 98a:	cf 91       	pop	r28
 98c:	1f 91       	pop	r17
 98e:	08 95       	ret

00000990 <_Z10randomSeedm>:
  #include "stdlib.h"
}

void randomSeed(unsigned long seed)
{
  if (seed != 0) {
 990:	61 15       	cp	r22, r1
 992:	71 05       	cpc	r23, r1
 994:	81 05       	cpc	r24, r1
 996:	91 05       	cpc	r25, r1
 998:	11 f0       	breq	.+4      	; 0x99e <_Z10randomSeedm+0xe>
    srandom(seed);
 99a:	0c 94 50 06 	jmp	0xca0	; 0xca0 <srandom>
 99e:	08 95       	ret

000009a0 <_Z6randoml>:
  }
}

long random(long howbig)
{
 9a0:	cf 92       	push	r12
 9a2:	df 92       	push	r13
 9a4:	ef 92       	push	r14
 9a6:	ff 92       	push	r15
  if (howbig == 0) {
 9a8:	61 15       	cp	r22, r1
 9aa:	71 05       	cpc	r23, r1
 9ac:	81 05       	cpc	r24, r1
 9ae:	91 05       	cpc	r25, r1
 9b0:	49 f0       	breq	.+18     	; 0x9c4 <_Z6randoml+0x24>
 9b2:	6b 01       	movw	r12, r22
 9b4:	7c 01       	movw	r14, r24
    return 0;
  }
  return random() % howbig;
 9b6:	0e 94 02 06 	call	0xc04	; 0xc04 <random>
 9ba:	a7 01       	movw	r20, r14
 9bc:	96 01       	movw	r18, r12
 9be:	0e 94 5c 05 	call	0xab8	; 0xab8 <__divmodsi4>
 9c2:	03 c0       	rjmp	.+6      	; 0x9ca <_Z6randoml+0x2a>
}

long random(long howbig)
{
  if (howbig == 0) {
    return 0;
 9c4:	60 e0       	ldi	r22, 0x00	; 0
 9c6:	70 e0       	ldi	r23, 0x00	; 0
 9c8:	cb 01       	movw	r24, r22
  }
  return random() % howbig;
}
 9ca:	ff 90       	pop	r15
 9cc:	ef 90       	pop	r14
 9ce:	df 90       	pop	r13
 9d0:	cf 90       	pop	r12
 9d2:	08 95       	ret

000009d4 <_Z6randomll>:

long random(long howsmall, long howbig)
{
 9d4:	cf 92       	push	r12
 9d6:	df 92       	push	r13
 9d8:	ef 92       	push	r14
 9da:	ff 92       	push	r15
 9dc:	0f 93       	push	r16
 9de:	1f 93       	push	r17
  if (howsmall >= howbig) {
 9e0:	62 17       	cp	r22, r18
 9e2:	73 07       	cpc	r23, r19
 9e4:	84 07       	cpc	r24, r20
 9e6:	95 07       	cpc	r25, r21
 9e8:	84 f4       	brge	.+32     	; 0xa0a <_Z6randomll+0x36>
 9ea:	89 01       	movw	r16, r18
 9ec:	9a 01       	movw	r18, r20
 9ee:	6b 01       	movw	r12, r22
 9f0:	7c 01       	movw	r14, r24
    return howsmall;
  }
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
 9f2:	c9 01       	movw	r24, r18
 9f4:	b8 01       	movw	r22, r16
 9f6:	6c 19       	sub	r22, r12
 9f8:	7d 09       	sbc	r23, r13
 9fa:	8e 09       	sbc	r24, r14
 9fc:	9f 09       	sbc	r25, r15
 9fe:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <_Z6randoml>
 a02:	6c 0d       	add	r22, r12
 a04:	7d 1d       	adc	r23, r13
 a06:	8e 1d       	adc	r24, r14
 a08:	9f 1d       	adc	r25, r15
}
 a0a:	1f 91       	pop	r17
 a0c:	0f 91       	pop	r16
 a0e:	ff 90       	pop	r15
 a10:	ef 90       	pop	r14
 a12:	df 90       	pop	r13
 a14:	cf 90       	pop	r12
 a16:	08 95       	ret

00000a18 <_ZN13ADCTouchClass4readEhi>:
*/
#include "Arduino.h"
#include "ADCTouch.h"

int ADCTouchClass::read(byte ADCChannel, int samples)
{
 a18:	bf 92       	push	r11
 a1a:	cf 92       	push	r12
 a1c:	df 92       	push	r13
 a1e:	ef 92       	push	r14
 a20:	ff 92       	push	r15
 a22:	0f 93       	push	r16
 a24:	1f 93       	push	r17
 a26:	cf 93       	push	r28
 a28:	df 93       	push	r29
 a2a:	b6 2e       	mov	r11, r22
 a2c:	ea 01       	movw	r28, r20
	long _value = 0;
	for(int _counter = 0; _counter < samples; _counter ++)
 a2e:	00 e0       	ldi	r16, 0x00	; 0
 a30:	10 e0       	ldi	r17, 0x00	; 0
#include "Arduino.h"
#include "ADCTouch.h"

int ADCTouchClass::read(byte ADCChannel, int samples)
{
	long _value = 0;
 a32:	c1 2c       	mov	r12, r1
 a34:	d1 2c       	mov	r13, r1
 a36:	76 01       	movw	r14, r12
	for(int _counter = 0; _counter < samples; _counter ++)
 a38:	0c 17       	cp	r16, r28
 a3a:	1d 07       	cpc	r17, r29
 a3c:	4c f5       	brge	.+82     	; 0xa90 <_ZN13ADCTouchClass4readEhi+0x78>
	{
		pinMode(ADCChannel, INPUT_PULLUP);
 a3e:	62 e0       	ldi	r22, 0x02	; 2
 a40:	8b 2d       	mov	r24, r11
 a42:	0e 94 5d 04 	call	0x8ba	; 0x8ba <pinMode>
		
		ADMUX |=   0b11111;
 a46:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 a4a:	8f 61       	ori	r24, 0x1F	; 31
 a4c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
		ADCSRA |= (1<<ADSC); //start conversion
 a50:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 a54:	80 64       	ori	r24, 0x40	; 64
 a56:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
		while(!(ADCSRA & (1<<ADIF))); //wait for conversion to finish
 a5a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 a5e:	84 ff       	sbrs	r24, 4
 a60:	fc cf       	rjmp	.-8      	; 0xa5a <_ZN13ADCTouchClass4readEhi+0x42>
		ADCSRA |= (1<<ADIF); //reset the flag
 a62:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 a66:	80 61       	ori	r24, 0x10	; 16
 a68:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
		
		pinMode(ADCChannel, INPUT);
 a6c:	60 e0       	ldi	r22, 0x00	; 0
 a6e:	8b 2d       	mov	r24, r11
 a70:	0e 94 5d 04 	call	0x8ba	; 0x8ba <pinMode>
		_value += analogRead(ADCChannel);
 a74:	8b 2d       	mov	r24, r11
 a76:	0e 94 17 04 	call	0x82e	; 0x82e <analogRead>
 a7a:	09 2e       	mov	r0, r25
 a7c:	00 0c       	add	r0, r0
 a7e:	aa 0b       	sbc	r26, r26
 a80:	bb 0b       	sbc	r27, r27
 a82:	c8 0e       	add	r12, r24
 a84:	d9 1e       	adc	r13, r25
 a86:	ea 1e       	adc	r14, r26
 a88:	fb 1e       	adc	r15, r27
#include "ADCTouch.h"

int ADCTouchClass::read(byte ADCChannel, int samples)
{
	long _value = 0;
	for(int _counter = 0; _counter < samples; _counter ++)
 a8a:	0f 5f       	subi	r16, 0xFF	; 255
 a8c:	1f 4f       	sbci	r17, 0xFF	; 255
 a8e:	d4 cf       	rjmp	.-88     	; 0xa38 <_ZN13ADCTouchClass4readEhi+0x20>
		ADCSRA |= (1<<ADIF); //reset the flag
		
		pinMode(ADCChannel, INPUT);
		_value += analogRead(ADCChannel);
	}
	return _value / samples;
 a90:	9e 01       	movw	r18, r28
 a92:	dd 0f       	add	r29, r29
 a94:	44 0b       	sbc	r20, r20
 a96:	55 0b       	sbc	r21, r21
 a98:	c7 01       	movw	r24, r14
 a9a:	b6 01       	movw	r22, r12
 a9c:	0e 94 5c 05 	call	0xab8	; 0xab8 <__divmodsi4>
}
 aa0:	c9 01       	movw	r24, r18
 aa2:	df 91       	pop	r29
 aa4:	cf 91       	pop	r28
 aa6:	1f 91       	pop	r17
 aa8:	0f 91       	pop	r16
 aaa:	ff 90       	pop	r15
 aac:	ef 90       	pop	r14
 aae:	df 90       	pop	r13
 ab0:	cf 90       	pop	r12
 ab2:	bf 90       	pop	r11
 ab4:	08 95       	ret

00000ab6 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 ab6:	08 95       	ret

00000ab8 <__divmodsi4>:
 ab8:	05 2e       	mov	r0, r21
 aba:	97 fb       	bst	r25, 7
 abc:	1e f4       	brtc	.+6      	; 0xac4 <__divmodsi4+0xc>
 abe:	00 94       	com	r0
 ac0:	0e 94 73 05 	call	0xae6	; 0xae6 <__negsi2>
 ac4:	57 fd       	sbrc	r21, 7
 ac6:	07 d0       	rcall	.+14     	; 0xad6 <__divmodsi4_neg2>
 ac8:	0e 94 86 05 	call	0xb0c	; 0xb0c <__udivmodsi4>
 acc:	07 fc       	sbrc	r0, 7
 ace:	03 d0       	rcall	.+6      	; 0xad6 <__divmodsi4_neg2>
 ad0:	4e f4       	brtc	.+18     	; 0xae4 <__divmodsi4_exit>
 ad2:	0c 94 73 05 	jmp	0xae6	; 0xae6 <__negsi2>

00000ad6 <__divmodsi4_neg2>:
 ad6:	50 95       	com	r21
 ad8:	40 95       	com	r20
 ada:	30 95       	com	r19
 adc:	21 95       	neg	r18
 ade:	3f 4f       	sbci	r19, 0xFF	; 255
 ae0:	4f 4f       	sbci	r20, 0xFF	; 255
 ae2:	5f 4f       	sbci	r21, 0xFF	; 255

00000ae4 <__divmodsi4_exit>:
 ae4:	08 95       	ret

00000ae6 <__negsi2>:
 ae6:	90 95       	com	r25
 ae8:	80 95       	com	r24
 aea:	70 95       	com	r23
 aec:	61 95       	neg	r22
 aee:	7f 4f       	sbci	r23, 0xFF	; 255
 af0:	8f 4f       	sbci	r24, 0xFF	; 255
 af2:	9f 4f       	sbci	r25, 0xFF	; 255
 af4:	08 95       	ret

00000af6 <__muluhisi3>:
 af6:	0e 94 a8 05 	call	0xb50	; 0xb50 <__umulhisi3>
 afa:	a5 9f       	mul	r26, r21
 afc:	90 0d       	add	r25, r0
 afe:	b4 9f       	mul	r27, r20
 b00:	90 0d       	add	r25, r0
 b02:	a4 9f       	mul	r26, r20
 b04:	80 0d       	add	r24, r0
 b06:	91 1d       	adc	r25, r1
 b08:	11 24       	eor	r1, r1
 b0a:	08 95       	ret

00000b0c <__udivmodsi4>:
 b0c:	a1 e2       	ldi	r26, 0x21	; 33
 b0e:	1a 2e       	mov	r1, r26
 b10:	aa 1b       	sub	r26, r26
 b12:	bb 1b       	sub	r27, r27
 b14:	fd 01       	movw	r30, r26
 b16:	0d c0       	rjmp	.+26     	; 0xb32 <__udivmodsi4_ep>

00000b18 <__udivmodsi4_loop>:
 b18:	aa 1f       	adc	r26, r26
 b1a:	bb 1f       	adc	r27, r27
 b1c:	ee 1f       	adc	r30, r30
 b1e:	ff 1f       	adc	r31, r31
 b20:	a2 17       	cp	r26, r18
 b22:	b3 07       	cpc	r27, r19
 b24:	e4 07       	cpc	r30, r20
 b26:	f5 07       	cpc	r31, r21
 b28:	20 f0       	brcs	.+8      	; 0xb32 <__udivmodsi4_ep>
 b2a:	a2 1b       	sub	r26, r18
 b2c:	b3 0b       	sbc	r27, r19
 b2e:	e4 0b       	sbc	r30, r20
 b30:	f5 0b       	sbc	r31, r21

00000b32 <__udivmodsi4_ep>:
 b32:	66 1f       	adc	r22, r22
 b34:	77 1f       	adc	r23, r23
 b36:	88 1f       	adc	r24, r24
 b38:	99 1f       	adc	r25, r25
 b3a:	1a 94       	dec	r1
 b3c:	69 f7       	brne	.-38     	; 0xb18 <__udivmodsi4_loop>
 b3e:	60 95       	com	r22
 b40:	70 95       	com	r23
 b42:	80 95       	com	r24
 b44:	90 95       	com	r25
 b46:	9b 01       	movw	r18, r22
 b48:	ac 01       	movw	r20, r24
 b4a:	bd 01       	movw	r22, r26
 b4c:	cf 01       	movw	r24, r30
 b4e:	08 95       	ret

00000b50 <__umulhisi3>:
 b50:	a2 9f       	mul	r26, r18
 b52:	b0 01       	movw	r22, r0
 b54:	b3 9f       	mul	r27, r19
 b56:	c0 01       	movw	r24, r0
 b58:	a3 9f       	mul	r26, r19
 b5a:	70 0d       	add	r23, r0
 b5c:	81 1d       	adc	r24, r1
 b5e:	11 24       	eor	r1, r1
 b60:	91 1d       	adc	r25, r1
 b62:	b2 9f       	mul	r27, r18
 b64:	70 0d       	add	r23, r0
 b66:	81 1d       	adc	r24, r1
 b68:	11 24       	eor	r1, r1
 b6a:	91 1d       	adc	r25, r1
 b6c:	08 95       	ret

00000b6e <random_r>:
 b6e:	8f 92       	push	r8
 b70:	9f 92       	push	r9
 b72:	af 92       	push	r10
 b74:	bf 92       	push	r11
 b76:	cf 92       	push	r12
 b78:	df 92       	push	r13
 b7a:	ef 92       	push	r14
 b7c:	ff 92       	push	r15
 b7e:	cf 93       	push	r28
 b80:	df 93       	push	r29
 b82:	ec 01       	movw	r28, r24
 b84:	68 81       	ld	r22, Y
 b86:	79 81       	ldd	r23, Y+1	; 0x01
 b88:	8a 81       	ldd	r24, Y+2	; 0x02
 b8a:	9b 81       	ldd	r25, Y+3	; 0x03
 b8c:	61 15       	cp	r22, r1
 b8e:	71 05       	cpc	r23, r1
 b90:	81 05       	cpc	r24, r1
 b92:	91 05       	cpc	r25, r1
 b94:	21 f4       	brne	.+8      	; 0xb9e <random_r+0x30>
 b96:	64 e2       	ldi	r22, 0x24	; 36
 b98:	79 ed       	ldi	r23, 0xD9	; 217
 b9a:	8b e5       	ldi	r24, 0x5B	; 91
 b9c:	97 e0       	ldi	r25, 0x07	; 7
 b9e:	2d e1       	ldi	r18, 0x1D	; 29
 ba0:	33 ef       	ldi	r19, 0xF3	; 243
 ba2:	41 e0       	ldi	r20, 0x01	; 1
 ba4:	50 e0       	ldi	r21, 0x00	; 0
 ba6:	0e 94 5c 05 	call	0xab8	; 0xab8 <__divmodsi4>
 baa:	49 01       	movw	r8, r18
 bac:	5a 01       	movw	r10, r20
 bae:	9b 01       	movw	r18, r22
 bb0:	ac 01       	movw	r20, r24
 bb2:	a7 ea       	ldi	r26, 0xA7	; 167
 bb4:	b1 e4       	ldi	r27, 0x41	; 65
 bb6:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <__muluhisi3>
 bba:	6b 01       	movw	r12, r22
 bbc:	7c 01       	movw	r14, r24
 bbe:	ac ee       	ldi	r26, 0xEC	; 236
 bc0:	b4 ef       	ldi	r27, 0xF4	; 244
 bc2:	a5 01       	movw	r20, r10
 bc4:	94 01       	movw	r18, r8
 bc6:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__mulohisi3>
 bca:	dc 01       	movw	r26, r24
 bcc:	cb 01       	movw	r24, r22
 bce:	8c 0d       	add	r24, r12
 bd0:	9d 1d       	adc	r25, r13
 bd2:	ae 1d       	adc	r26, r14
 bd4:	bf 1d       	adc	r27, r15
 bd6:	b7 ff       	sbrs	r27, 7
 bd8:	03 c0       	rjmp	.+6      	; 0xbe0 <random_r+0x72>
 bda:	01 97       	sbiw	r24, 0x01	; 1
 bdc:	a1 09       	sbc	r26, r1
 bde:	b0 48       	sbci	r27, 0x80	; 128
 be0:	88 83       	st	Y, r24
 be2:	99 83       	std	Y+1, r25	; 0x01
 be4:	aa 83       	std	Y+2, r26	; 0x02
 be6:	bb 83       	std	Y+3, r27	; 0x03
 be8:	bc 01       	movw	r22, r24
 bea:	cd 01       	movw	r24, r26
 bec:	9f 77       	andi	r25, 0x7F	; 127
 bee:	df 91       	pop	r29
 bf0:	cf 91       	pop	r28
 bf2:	ff 90       	pop	r15
 bf4:	ef 90       	pop	r14
 bf6:	df 90       	pop	r13
 bf8:	cf 90       	pop	r12
 bfa:	bf 90       	pop	r11
 bfc:	af 90       	pop	r10
 bfe:	9f 90       	pop	r9
 c00:	8f 90       	pop	r8
 c02:	08 95       	ret

00000c04 <random>:
 c04:	8f 92       	push	r8
 c06:	9f 92       	push	r9
 c08:	af 92       	push	r10
 c0a:	bf 92       	push	r11
 c0c:	cf 92       	push	r12
 c0e:	df 92       	push	r13
 c10:	ef 92       	push	r14
 c12:	ff 92       	push	r15
 c14:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 c18:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 c1c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
 c20:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
 c24:	61 15       	cp	r22, r1
 c26:	71 05       	cpc	r23, r1
 c28:	81 05       	cpc	r24, r1
 c2a:	91 05       	cpc	r25, r1
 c2c:	21 f4       	brne	.+8      	; 0xc36 <random+0x32>
 c2e:	64 e2       	ldi	r22, 0x24	; 36
 c30:	79 ed       	ldi	r23, 0xD9	; 217
 c32:	8b e5       	ldi	r24, 0x5B	; 91
 c34:	97 e0       	ldi	r25, 0x07	; 7
 c36:	2d e1       	ldi	r18, 0x1D	; 29
 c38:	33 ef       	ldi	r19, 0xF3	; 243
 c3a:	41 e0       	ldi	r20, 0x01	; 1
 c3c:	50 e0       	ldi	r21, 0x00	; 0
 c3e:	0e 94 5c 05 	call	0xab8	; 0xab8 <__divmodsi4>
 c42:	49 01       	movw	r8, r18
 c44:	5a 01       	movw	r10, r20
 c46:	9b 01       	movw	r18, r22
 c48:	ac 01       	movw	r20, r24
 c4a:	a7 ea       	ldi	r26, 0xA7	; 167
 c4c:	b1 e4       	ldi	r27, 0x41	; 65
 c4e:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <__muluhisi3>
 c52:	6b 01       	movw	r12, r22
 c54:	7c 01       	movw	r14, r24
 c56:	ac ee       	ldi	r26, 0xEC	; 236
 c58:	b4 ef       	ldi	r27, 0xF4	; 244
 c5a:	a5 01       	movw	r20, r10
 c5c:	94 01       	movw	r18, r8
 c5e:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__mulohisi3>
 c62:	dc 01       	movw	r26, r24
 c64:	cb 01       	movw	r24, r22
 c66:	8c 0d       	add	r24, r12
 c68:	9d 1d       	adc	r25, r13
 c6a:	ae 1d       	adc	r26, r14
 c6c:	bf 1d       	adc	r27, r15
 c6e:	b7 ff       	sbrs	r27, 7
 c70:	03 c0       	rjmp	.+6      	; 0xc78 <random+0x74>
 c72:	01 97       	sbiw	r24, 0x01	; 1
 c74:	a1 09       	sbc	r26, r1
 c76:	b0 48       	sbci	r27, 0x80	; 128
 c78:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 c7c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 c80:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 c84:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 c88:	bc 01       	movw	r22, r24
 c8a:	cd 01       	movw	r24, r26
 c8c:	9f 77       	andi	r25, 0x7F	; 127
 c8e:	ff 90       	pop	r15
 c90:	ef 90       	pop	r14
 c92:	df 90       	pop	r13
 c94:	cf 90       	pop	r12
 c96:	bf 90       	pop	r11
 c98:	af 90       	pop	r10
 c9a:	9f 90       	pop	r9
 c9c:	8f 90       	pop	r8
 c9e:	08 95       	ret

00000ca0 <srandom>:
 ca0:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 ca4:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 ca8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 cac:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
 cb0:	08 95       	ret

00000cb2 <__mulshisi3>:
 cb2:	b7 ff       	sbrs	r27, 7
 cb4:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__muluhisi3>

00000cb8 <__mulohisi3>:
 cb8:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <__muluhisi3>
 cbc:	82 1b       	sub	r24, r18
 cbe:	93 0b       	sbc	r25, r19
 cc0:	08 95       	ret

00000cc2 <_exit>:
 cc2:	f8 94       	cli

00000cc4 <__stop_program>:
 cc4:	ff cf       	rjmp	.-2      	; 0xcc4 <__stop_program>
